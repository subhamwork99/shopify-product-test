<div id="relatedProductWrapper">
  <div class="width">
    <h2 class="main-heading">You may also like</h2>
    <div class="related-products"></div>
  </div>
</div>

{% assign my_variable = 'downtown-store-related-product' %}

<script>
  function formatMoney(cents, format) {
    if (typeof cents == 'string') { cents = cents.replace('.', ''); }
    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var formatString = (format || this.money_format);
    function defaultOption(opt, def) {
      return (typeof opt == 'undefined' ? def : opt);
    }
    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = defaultOption(precision, 2);
      thousands = defaultOption(thousands, ',');
      decimal   = defaultOption(decimal, '.');
      if (isNaN(number) || number == null) { return 0; }
      number = (number/100.0).toFixed(precision);
      var parts   = number.split('.'),
          dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
          cents   = parts[1] ? (decimal + parts[1]) : '';
      return dollars + cents;
    }
    switch(formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }
    return formatString.replace(placeholderRegex, value);
  }

  function buildBlock(product) {
    const formattedPrice = formatMoney(product?.variants[0]?.price, "{{ shop.money_format }}");
    const html = `
      <a class="related-product" href="${product?.product_url}" >
        <img src="${product?.images[0]?.src}" />
        <h3>${product?.title}</h3>
        <span>${formattedPrice}</span>
        <form method="post" action="/cart/add">
          <input name="id" type="hidden" value="${product?.variants[0]?.id}" />
          <button type="submit">Add to cart</button>
        </form>
      </a>`;
    return html;
  }

  function getData() {
    const productName = document?.getElementsByClassName("h1")[0]?.textContent?.trim() || '';
    const currentURL = window.location.href;
    fetch(`https://shopify-product-test-2.onrender.com/theme-data-status`)
      .then(response => response.json())
      .then(themeValueStatus => {
        if(themeValueStatus.themeValueStatus){
        fetch(`https://shopify-product-test-2.onrender.com/related-product/?productName=${encodeURIComponent(productName)}&currentURL=${currentURL}`)
          .then(response => response.json())
          .then(products => {
            products && products.forEach(product => {
            const html = buildBlock(product);
            document.querySelector('.related-products').innerHTML += html;
        });
      });
        }
      });
  }

  getData();
</script>

<style>
  .main-heading {
    display: flex;
    justify-content: center;
    font-size: 2.5rem;
    font-weight: 600;
  }

  .related-products {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    margin-top: 24px;
  }

  .related-product {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 20%;
    margin-bottom: 30px;
  }

  .related-product img {
    max-width: 100%;
    margin-bottom: 10px;
    height: 155px;
  }

  .related-product h3 {
    font-size: 18px;
    margin-bottom: 10px;
  }

  .related-product span {
    font-size: 16px;
    margin-bottom: 10px;
  }

  .related-product form {
    display: flex;
    align-items: center;
  }

  .related-product button {
    background-color: #000;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 0;
    text-transform: uppercase;
    font-weight: bold;
    cursor: pointer;
  }
</style>

{% schema %}
{
  "name": "Star Rating",
  "target": "section",
  "settings": [
    { "type": "product", "id": "product", "label": "product", "autofill": true },
    { "type": "color", "id": "colour", "label": "Star Colour", "default": "#ff0000" }
  ]
}
{% endschema %}
